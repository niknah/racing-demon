var w=Object.defineProperty;var L=(n,t,e)=>t in n?w(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var T=(n,t,e)=>(L(n,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const r of a)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(a){const r={};return a.integrity&&(r.integrity=a.integrity),a.referrerPolicy&&(r.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?r.credentials="include":a.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(a){if(a.ep)return;a.ep=!0;const r=e(a);fetch(a.href,r)}})();const h=class h{constructor(t,e){this.$stack=t,this.stackElem=this.$stack.get(0),this.options=e||{},this.$onBeforeDrop=$.Callbacks(),this.init()}onBeforeDrop(t){this.$onBeforeDrop.add(t)}fireOnBeforeDrop(t){this.$onBeforeDrop.fire(t)}dropCard(t){let e=!0;if(this.options.isDropAccept&&(e=this.options.isDropAccept(this.stackElem,t)),e){this.fireOnBeforeDrop({event,dragElement:t});let s=null;for(let a=t;a&&cards.getCardCodeFromElement(a)!=h.blankCard;a=s){s=a.nextElementSibling,a.setAttribute("data-dropped-target",this.stackElem.id||"true"),cards.clearCardStyles(a);const r=a.parentNode;this.stackElem.insertBefore(a,this.blank),y.destroyDraggable(a),$(r).trigger("card-dragged-away",{cardElem:a}),h.applyStyles(this.$stack),this.options.drop&&this.options.drop(event,a)}}}static applyStyles(t){$(".card",t).css("left","").css("top",""),cards.applyStyles(t)}static addCard(t,e,s){const a=h.isTopBlankCard(t),r=cards.addCardImages($(t),s)[0];r.setAttribute("data-player",e),a&&(t.insertBefore(r,r.previousSibling),h.applyStyles($(t)))}static isTopBlankCard(t){if(t.children.length===0)return!1;const e=t.children[t.children.length-1];return cards.getCardCodeFromElement(e)==h.blankCard}static getTopNonBlankCard(t){for(let e=t.children.length-1;e>=0;--e){const s=t.children[e];if(cards.getCardCodeFromElement(s)!=h.blankCard)return s}return null}getTopNonBlankCard(){return h.getTopNonBlankCard(this.stackElem)}dropEvent(t){const e=t.originalEvent.target;this.dropCard(e)}init(){this.blank=cards.addCardImages(this.$stack,[h.blankCard])[0],this.blank.classList.add("card-blank");const t={drop:e=>{this.dropEvent(e)}};for(const e in this.options)t[e]||(t[e]=this.options[e]);this.$stack.on("drop-to-stack",e=>this.dropEvent(e)),$(this.blank).droppable(t)}};T(h,"blankCard","EMPTY");let c=h;class E{static serialize(t){const e=[];for(const s of t.children){const a={className:s.className};for(const r of s.attributes)r.name.substring(0,5)=="data-"&&(a[r.name]=r.value);e.push(a)}return e}static deserialize(t,e){const s=[];for(const r of e)s.push(r["data-card-code"]);const a=cards.replaceCardImages($(t),s);for(let r=0;r<a.length;++r){const o=a[r],i=e[r];o.className=i.cardElem;for(const d in i)d.substring(0,5)=="data-"&&o.setAttribute(d,i[d])}}static getCardListFromStackElem(t){const e=[];for(const s of t.children){const a=cards.getCardCodeFromElement(s);if(a==c.blankCard)continue;if(!s.classList.contains("card")){console.warn("Non card in stack",t.className);continue}const o={playerId:s.getAttribute("data-player"),code:a,cardElem:s};e.push(o)}return e}}class g{static startDropAnimationElements(t,e,s){const a=$(e).offset(),r=$(s).offset();t.style.left=`${a.left-r.left}px`,t.style.top=`${a.top-r.top}px`,g.startDropAnimation(t)}static startDropAnimation(t){if(t.classList.contains("card-animation-started"))return!1;const e=t.style.left,s=t.style.top;t.classList.remove("card-dropped"),t.classList.add("card-animation-started"),setTimeout(()=>{t.style.left=e,t.style.top=s,t.addEventListener("animationend",()=>{g.clearCardLeftTop(t),t.classList.remove("card-animation-started"),t.classList.remove("card-dropped"),g.clearCardLeftTop(t),c.applyStyles($(t.parentNode))}),t.classList.add("card-dropped")},10)}static clearCardLeftTop(t){t.style.removeProperty("top"),t.style.removeProperty("left")}}class y{constructor(t,e){this.$stack=t,this.stackElem=t.get(0),this.options=e||{},this.init()}static destroyDraggable(t){if(t.classList.contains("ui-draggable"))try{$(t).draggable("destroy")}catch(e){console.error(e)}t.draggable=!1}static dragCardToStack(t,e){const s=t.parentNode,a=$.Event("drop-card",{target:t}),r=$.Event("drop-to-stack",{originalEvent:{target:t}});$(t).trigger(a),$(e).trigger(r),g.startDropAnimationElements(t,s,e)}stopDragEvent(t){const e=t.target;setTimeout(()=>{e.getAttribute("data-dropped-target")?e.removeAttribute("data-dropped-target"):g.clearCardLeftTop(e),this.options.stop&&this.options.stop(e,t)},0)}makeCardDraggable(t){t.removeAttribute("draggable"),$(t).on("drop-card",e=>this.stopDragEvent(e)),$(t).draggable({stop:e=>{setTimeout(()=>{this.stopDragEvent(e)},0)}})}flipTopCards(t,e){const s=cards.addCardImages(this.$stack,e);for(const r of s)r.setAttribute("data-player",t),r.style.position="relative";const a=this.stackElem.children[this.stackElem.children.length-1];return this.makeCardDraggable(a),s}removeBackCard(){this.cardBack.remove()}getTopCard(){return this.stackElem.lastElementChild}isTopCardBack(){return this.getTopCard().classList.contains("card-back")}init(){this.options.backCard&&(this.cardBack=cards.addCardImages(this.$stack,[this.options.backCard])[0],this.cardBack.classList.add("card-back"),this.cardBack.addEventListener("click",()=>{this.options.clickCardBack&&this.options.clickCardBack()}))}}T(y,"redBack","RED_BACK");class f{constructor(){this.cardNumbers=[null,"A",2,3,4,5,6,7,8,9,10,"J","Q","K"],this.cardNumbersRev={},this.cardTypes=["C","D","H","S"],this.cardTypesRev={};for(let t=1;t<this.cardNumbers.length;++t){let e=this.cardNumbers[t];this.cardNumbersRev[e]=t}for(let t=0;t<this.cardTypes.length;++t){let e=this.cardTypes[t];this.cardTypesRev[e]=t}}typeCodeToNumber(t){return this.cardTypesRev[t]}cardNumberToCode(t){return this.cardNumbers[t]}cardCodeToNumber(t){return this.cardNumbersRev[t]}getTypeColor(t){return t=="H"||t=="D"?"red":"black"}}T(f,"AceNumber",1),T(f,"KingNumber",13);const S=new f;let F=()=>({emit(n,...t){for(let e=0,s=this.events[n]||[],a=s.length;e<a;e++)s[e](...t)},events:{},on(n,t){var e;return((e=this.events)[n]||(e[n]=[])).push(t),()=>{var s;this.events[n]=(s=this.events[n])==null?void 0:s.filter(a=>t!==a)}}});class B{constructor(t){let e=localStorage.getItem("playerId");e||(e=Math.floor(Math.random()*1e9)),this.stepUpto=1,this.playerId=e,this.onPlayerMoveEvent=F(),this.webSocket=new WebSocket("http://localhost:3333/"),this.webSocket.onopen=()=>{this.webSocket.readState==1&&(console.log("websocket opened"),this.connected=!0,this.webSocket.send(JSON.stringify({playerId:e,gameId:t})))},this.webSocket.onmessage=s=>{const a=JSON.parse(s.data);if(console.log("eee",s,a),a.step!==this.step+1){console.error("game out of sync with server");return}this.step=a.step,this.onPlayerMoveEvent.emit("move",a)}}onPlayerMove(t){return this.onPlayerMoveEvent.on("move",t)}sendPlayerMove(t){t.step=++this.step,this.webSocket.send(JSON.stringify(t))}}class l{constructor(t,e,s){this.player=t;const a=parseInt(s);l.assert(a<S.cardNumbers.length,"Invalid card number:"+s),l.assert(S.typeCodeToNumber(e)!==void 0,"Invalid card type:"+e),this.type=e,this.num=a}static assert(t,e){t||console.error(e)}getColor(){return S.getTypeColor(this.type)}static cardElemToCard(t){return l.assert(t.classList.contains("card")),l.cardCodeToCard(t.getAttribute("data-player"),cards.getCardCodeFromElement(t))}static cardCodeToCard(t,e){return new l(t,e.substring(e.length-1),S.cardCodeToNumber(e.substring(0,e.length-1)))}getCardCode(){return`${S.cardNumberToCode(this.num)}${this.type}`}}class M{constructor(t){this.playerId=t,this.cards=[],this.lastPush=new Date().getTime()}shuffle(){for(const t of this.cards)t.rand=Math.random();this.cards=this.cards.sort((t,e)=>t.rand-e.rand)}length(){return this.cards.length}moveTo(t){t.cards=this.cards,this.cards=[]}push(t){this.lastPush=new Date().getTime(),this.cards.push(t)}mSecsSinceLastPush(){return new Date().getTime()-this.lastPush}popArray(t){let e=[];for(let s=0;s<t;++s){const a=this.cards.pop();a&&e.push(a)}return e}lastCard(){return this.cards[this.cards.length-1]}pop(){return this.cards.pop()}}class k{constructor(t){this.count=0,this.mSecs=0,this.name=t}assign(t){Object.assign(this,t)}addEvent(t){++this.count,this.mSecs+=t}mSecsPerMove(){return this.count?this.mSecs/this.count:6e3}static totalMSecsPerMove(t){let e=0,s=0;for(const a of Object.values(t))a.name!="main"&&(e+=a.count,s+=a.mSecs);return s/e}static timerCountsToStr(t){let e="";for(const s of Object.values(t))e+=`${s.name} ${s.mSecsPerMove()}
`;return e}static parseObjects(t){const e={};for(const s of Object.values(t))(e[s.name]=new k(s.name)).assign(s);return e}}const p={robotTest:null,debugPlayer:!1,hintMove:!1};window.config=p;class O extends M{constructor(t){super(t),this.elem=null}setElement(t){this.elem=t}push(t){super.push(t),this.elem&&c.addCard(this.elem,this.playerId,t.getCardCode())}popArray(t){const e=super.popArray(t);for(let s=e.length-1;s>=0;--s)c.getTopNonBlankCard(this.elem).remove();return e}pop(){return this.cards.length===0?null:(this.elem&&c.getTopNonBlankCard(this.elem).remove(),super.pop())}}class D{constructor(t){this.playerId=t,this.cards=new M(t),this.poppedCards=new M(t),this.timerCounts={};for(const e of["main","ace","drop"])this.timerCounts[e]=new k(e);if(this.lastCardEvent=null,this.startTime=new Date().getTime(),this.finishTime=null,this.robotMoves={},p.robotTest!==null)this.randomRobotSpeed=1,this.randomRobotMoveTopToStack=f.KingNumber-p.robotTest;else{this.randomRobotSpeed=1+Math.random()*1;const e=Math.floor(Math.random()*4);e>=0?this.randomRobotMoveTopToStack=f.KingNumber-e:this.randomRobotMoveTopToStack=-1}this.$onFinish=$.Callbacks(),this.hasFinished=!1}increaseRobotMove(t){this.robotMoves[t]===void 0?this.robotMoves[t]=1:++this.robotMoves[t]}mSecsSinceCardEvent(){return new Date().getTime()-this.lastCardEvent}static mSecsToTimeStr(t){const e=t%1e3,s=t/1e3%60,a=t/1e3/60;function r(o,i){return(Math.floor(o)+"").padStart(i,"0")}return`${Math.floor(a)}:${r(s,2)}.${r(e/10,3)}`}getRandomTimeout(t){t*=this.randomRobotSpeed;const e=t*.65;return Math.floor(e+Math.random()*(t*.5))}onFinish(t){this.$onFinish.add(t)}fireOnFinish(){try{this.$onFinish.fire(this)}catch(t){console.error(t)}}increaseTimerCount(t){const e=new Date().getTime();if(this.lastCardEvent){const s=this.timerCounts[t];s&&s.addEvent(e-this.lastCardEvent)}this.lastCardEvent=e}initCards(){this.playerStacks=[];for(let t=0;t<5;++t)this.playerStacks.push(new O(this.playerId));for(const t of S.cardTypes)for(let e=1;e<S.cardNumbers.length;++e)this.cards.push(new l(this.playerId,t,e));this.cards.shuffle()}addCardToPlayerStack(t,e){this.playerStacks[t].cards.push(e)}poppedCardsToCards(){this.poppedCards.moveTo(this.cards),this.cards.cards.reverse();const t=this.cards.cards[0];this.cards.cards=this.cards.cards.slice(1),this.cards.cards.push(t)}}class R extends D{constructor(t){super(t),this.$onMainDragStop=$.Callbacks(),this.$onFlipMainStack=$.Callbacks(),this.$onAfterDrop=$.Callbacks(),this.$onBeforeDrop=$.Callbacks()}onFlipMainStack(t){this.$onFlipMainStack.add(t)}increaseRobotMove(t){super.increaseRobotMove(t),(p.debugPlayer||p.robotTest!==null)&&$(".debug-move",this.div).html(JSON.stringify(this.robotMoves,Object.keys(this.robotMoves).sort(),4)+`
`+k.timerCountsToStr(this.timerCounts))}createGui(t){const e=document.getElementById("player-template").cloneNode(!0);return e.id=`player-area-${this.playerId}`,e.classList.add(e.id),$(".player-name",e).html(`Player #${this.playerId+1}`),t.appendChild(e),this.playArea=t,this.initGui(e)}initGui(t){this.div=t,this.dropStacks=this.div.querySelectorAll(".drop-stack"),this.$takeStack=$(".take-stack",this.div),this.$takeStack.get(0).setAttribute("data-player",this.playerId),this.aceStackCount=t.querySelector(".ace-stack-count"),this.dropStackCount=t.querySelector(".drop-stack-count"),this.totalCount=t.querySelector(".total-count"),this.aceStackKingCount=t.querySelector(".ace-stack-king-count"),this.mainStackCount=t.querySelector(".main-stack-count"),this.cardStackDroppables=[],this.cardStackDraggables=[],this.flipMainStackEvent=()=>{this.$onFlipMainStack.fire(this),this.flipMainStack()},this.mainStackDraggable=new y(this.$takeStack,{backCard:y.redBack,stop:()=>{const e=c.getTopNonBlankCard(this.$takeStack.get(0));e&&!e.classList.contains("ui-draggable")&&(this.mainStackDraggable.makeCardDraggable(e),e.addEventListener("click",this.flipMainStackEvent));const s=this.getMainStackCount();s===0&&!this.finishTime&&(this.finishTime=new Date().getTime(),this.hasFinished=!0,this.fireOnFinish()),this.updateMainStackCount(s),this.fireOnMainDragStop({player:this})},clickCardBack:()=>this.flipMainStack()}),this.initDropStacks(),this.flipMainStack()}getMainStackCount(){return this.poppedCards.length()+this.cards.length()+this.$takeStack.get(0).children.length-1}updateStatCount(t,e){t.innerHTML=e||0,e?t.parentNode.classList.remove("no-count"):t.parentNode.classList.add("no-count")}updateAceStackKingCount(t){this.updateStatCount(this.aceStackKingCount,t)}updateAceStackCount(t){this.updateStatCount(this.aceStackCount,t)}updateDropStackCount(t){this.updateStatCount(this.dropStackCount,t)}updateTotalCount(t){this.updateStatCount(this.totalCount,t)}updateMainStackCount(t){this.mainStackCount.innerHTML=t}onMainDragStop(t){this.$onMainDragStop.add(t)}fireOnMainDragStop(t){try{this.$onMainDragStop.fire(this,t)}catch(e){console.error(e)}}onAfterDrop(t){this.$onAfterDrop.add(t)}fireOnAfterDrop(t,e){let s=t.getAttribute("data-stack-type");this.increaseTimerCount(s),this.$onAfterDrop.fire(this,{dropStack:t,dragElement:e})}onBeforeDrop(t){this.$onBeforeDrop.add(t)}fireOnBeforeDrop(t,e){this.$onBeforeDrop.fire(this,{dropStack:t,dragElement:e})}removeCardEvents(t){t.removeEventListener("click",this.flipMainStackEvent)}flipMainStack(){const t=[];for(;!this.mainStackDraggable.isTopCardBack();){const r=this.mainStackDraggable.getTopCard();if(r){r.remove();const o=u.getCardCodeFromElement(r),i=l.cardCodeToCard(this.playerId,o);t.push(i)}else break}t.reverse();for(const r of t)this.poppedCards.push(r);this.cards.length()===0&&this.poppedCardsToCards();const s=this.cards.popArray(3).map(r=>r.getCardCode()),a=this.mainStackDraggable.flipTopCards(this.playerId,s);this.cards.length()===0?this.poppedCards.length()===0?this.$takeStack.addClass("no-card-on-stack"):this.$takeStack.addClass("last-card-on-stack"):(this.$takeStack.removeClass("no-card-on-stack"),this.$takeStack.removeClass("last-card-on-stack")),a.length>0&&a[a.length-1].addEventListener("click",this.flipMainStackEvent),c.applyStyles(this.$takeStack),this.updateMainStackCount(this.getMainStackCount()),this.increaseTimerCount("main")}initDropStack(t,e){t.setAttribute("data-drop-stack",e),t.setAttribute("data-player",this.playerId);const s=new y($(t),{stop:()=>{c.applyStyles($(t))}}),a=new c($(t),{drop:(r,o)=>{this.removeCardEvents(o),this.addCardToPlayerStack(e,l.cardCodeToCard(this.playerId,u.getCardCodeFromElement(o))),setTimeout(()=>{this.makeStackCardDraggable(e,o),c.applyStyles($(t)),this.fireOnAfterDrop(t,o)},0)},accept:r=>!r||!r.get(0)?!1:r.get(0).parentNode?r.get(0).parentNode.getAttribute("data-player")==this.playerId:(console.error("accept. no parent node",r,r.get(0)),!1),isDropAccept:(r,o)=>{if(r.children.length<=1)return!0;const i=o.parentNode.getAttribute("data-player"),d=r.getAttribute("data-player");if(i!=d)return!1;const C=u.getCardCodeFromElement(o),v=c.getTopNonBlankCard(r),b=u.getCardCodeFromElement(v),A=l.cardCodeToCard(0,b),P=A.getColor(),N=l.cardCodeToCard(0,C),I=N.getColor();return N.num==A.num-1&&I!=P&&r.getAttribute("data-drop-stack")!=o.parentNode.getAttribute("data-drop-stack")}});return a.onBeforeDrop(r=>{this.fireOnBeforeDrop(t,r.dragElement)}),{draggable:s,droppable:a}}makeStackCardDraggable(t,e){this.cardStackDraggables[t].makeCardDraggable(e)}initDropStacks(){let t=0;for(const e of this.dropStacks){let{draggable:s,droppable:a}=this.initDropStack(e,t);const r=this.playerStacks[t];r.setElement(e),this.cardStackDroppables.push(a),this.cardStackDraggables.push(s);const o=this.cards.pop();r.push(o),this.makeStackCardDraggable(t,c.getTopNonBlankCard(r.elem)),++t}}}class m{constructor(t){this.racingDemon=t,this.lastAceStackCards=this.getLastAceStackCard(),this.player=null,this.minMSecsBetweenDrop=1500,this.checkTooQuick=!0}getLastAceStackCard(){const t=[];let e=0;for(const s of this.racingDemon.aceStackElems){const a=c.getTopNonBlankCard(s);t.push({elem:a,aceStack:s,aceStackDroppable:this.racingDemon.aceStacksDroppable[e],card:a?l.cardElemToCard(a):null}),++e}return t}getFirstLastDropStacks(){const t=[];for(const e of this.player.dropStacks){const s=E.getCardListFromStackElem(e);if(s.length===0){t.push({dropStack:e,cards:s});continue}const a=s[0],r=s[s.length-1];t.push({dropStack:e,cards:s,firstElem:a.cardElem,lastElem:r.cardElem,first:l.cardCodeToCard(a.playerId,a.code),last:l.cardCodeToCard(r.playerId,r.code)})}return t}findPreFirstToAceDropStackMove(){if(!this.firstEmptyDropStack)return null;for(const t of this.firstLast)if(!(!t.first||t.cards.length<2)&&this.findCardToAceStackMove(t.first,t.firstElem,!0))return{type:"PreFirstToAceDropStack",fromCard:t.cards[1].cardElem,waitMSecs:500,toStack:this.firstEmptyDropStack};return null}findInterDropStackMove(){let t=0;for(const e of this.firstLast){let s=0;const a=e.first;for(const r of this.firstLast){if(a&&r.last&&s!=t&&this.canAddCardToDropStack(a,r.last))return{type:"InterDropStack",fromCard:e.firstElem,toStack:r.dropStack};++s}++t}return null}setCheckTooQuick(t){this.checkTooQuick=t}isMoveToStackTooQuick(t,e,s){if(p.robotTest!==null||!this.checkTooQuick)return!1;const a=new Date().getTime()-e.lastCardDrop;return!!(s&&s.playerId!=t&&a<this.minMSecsBetweenDrop)}canAddCardToDropStack(t,e){return e.num-1==t.num&&e.getColor()!=t.getColor()}findMainStackToDropMove(){if(!this.mainCard)return null;let t="MainToDropStack",e=!1;const s=this.player.getMainStackCount();let a=null;s<=this.firstLast.length&&this.emptyDropStacks>=s&&(e=!0,t="LastMainToDropStack",a=500);for(const r of this.firstLast){let o=!1;if(r.first)this.canAddCardToDropStack(this.mainCard,r.last)&&(o=!0);else{if(this.firstEmptyDropStack!==null){for(const i of this.firstLast)if(i.first&&this.canAddCardToDropStack(i.first,this.mainCard)){t="PreInterMoveMainToDropStack",a=500,o=!0;break}}if(!o)if(e||this.emptyDropStacks>1&&this.mainCard.num!=f.KingNumber&&this.mainCard.num!=2)o=!0;else continue}if(o){const i={type:t,fromCard:this.mainCardElem,toStack:r.dropStack};return a&&(i.waitMSecs=a),i}}return null}findMainToAceStackMove(){return this.mainCard?this.findCardToAceStackMove(this.mainCard,this.mainCardElem,!0):null}findCardToAceStackMove(t,e,s){let a=0;for(const r of this.lastAceStackCards)try{const o=this.racingDemon.aceStacksDroppable[a];if(s&&this.isMoveToStackTooQuick(this.player.playerId,o,r.card))continue;if(!r.card){if(t.num==f.AceNumber)return{type:"MainToEmptyAceStack",fromCard:e,toStack:r.aceStack};continue}if(r.card.num+1==t.num&&r.card.type==t.type)return{type:"MainToAceStack",fromCard:e,toStack:r.aceStack}}finally{++a}return null}findDropStackToAceStackMove(){for(const t of this.firstLast){if(!t.last)continue;const e=this.findCardToAceStackMove(t.last,t.lastElem,!0);if(e)return e.type="DropStackToAceStack",e}return null}setPlayer(t){this.player=t,this.takeStack=t.$takeStack.get(0),t.mainStackDraggable.isTopCardBack()?this.mainCardElem=this.mainCard=null:(this.mainCardElem=t.mainStackDraggable.getTopCard(),this.mainCardElem&&(this.mainCard=l.cardElemToCard(this.mainCardElem))),this.firstLast=this.getFirstLastDropStacks(),this.firstEmptyDropStack=null,this.emptyDropStacks=0;for(const e of this.firstLast)e.first||(this.firstEmptyDropStack=e.dropStack,++this.emptyDropStacks)}robotFindNextStep(){const t=this.findMainToAceStackMove();if(t)return t;const e=this.findDropStackToAceStackMove();if(e)return e;const s=this.findInterDropStackMove();if(s)return s;const a=this.findMainStackToDropMove();if(a)return a;const r=this.findPreFirstToAceDropStackMove();if(r)return r}getWaitFromMove(t){const e=this.player,s=this.racingDemon;let a=null;if(t&&(t.waitMSecs?a=e.getRandomTimeout(t.waitMSecs):/DropStack$/.exec(t.name)?a=e.getRandomTimeout(s.timerCounts.drop.mSecsPerMove()):/AceStack$/.exec(t.name)&&(a=e.getRandomTimeout(s.timerCounts.ace.mSecsPerMove()))),!a&&s.timerCounts){const r=s.timerCounts.main.mSecsPerMove();r<500?a=e.getRandomTimeout(s.robotTimerMSecs):a=e.getRandomTimeout(r)}else a=6e3;return a}robotDoNextStep(){const t=this.robotFindNextStep();return t?(console.log("playerMove",this.player.playerId,t),y.dragCardToStack(t.fromCard,t.toStack)):this.player.flipMainStack(),this.player.increaseRobotMove(t?t.type:"FlipMainStack"),t}static getNextMove(t,e){const s=new m(t);return s.setPlayer(e),s.setCheckTooQuick(!1),s.robotFindNextStep()}static doPlayerTurn(t,e){if(t.gameFinished||e.hasFinished)return null;const s=new m(t);s.setPlayer(e);const a=s.robotFindNextStep();let r=s.getWaitFromMove(a);p.robotTest!==null&&(r=100),e.robotTimeoutId=setTimeout(()=>{try{const o=new m(t);o.setPlayer(e),o.robotDoNextStep()}finally{m.doPlayerTurn(t,e)}},r)}static startPlayerTimer(t,e){if(p.robotTest===null&&t.playerId==e.playerId||e.robotTimeoutId)return null;let s;p.robotTest!==null?s=100:s=e.getRandomTimeout(t.robotTimerMSecs),e.robotTimeoutId=setTimeout(()=>m.doPlayerTurn(t,e),s)}}class u{constructor(t){this.players=[],this.robotPlayers=[],this.playerId=0,this.robotTimerMSecs=1e4,this.gameFinished=!1,this.gameStartTime=new Date().getTime(),this.networkClient=null,this.setupNetworkClient(),t||(t=2);for(let e=0;e<t;++e){const s=this.addPlayer(e);e==this.playerId&&(s.randomRobotMoveTopToStack=-1)}}setupNetworkClient(){if(document.location.search){const t=URLSearchParams(document.location.search.substring(1));t.gameId&&(this.networkClient=new B(t.gameId),this.networkClient.onPlayerMove(e=>this.onRemotePlayerMove(e)))}}onRemotePlayerMove(t){console.log("remote player move",t)}debugNextMove(t,e){if(!p.hintMove)return;const s=$(".next-move",this.div),a=this.getHintNextMove(t,e);a.status=="ok"?s.addClass("next-move-ok"):s.removeClass("next-move-ok"),s.html(`${a.status}: ${a.message}`)}getHintNextMove(t,e){const s=m.getNextMove(this,t);let a="ok",r="";if(s){const o=u.getCardCodeFromElement(s.fromCard);e?u.getCardCodeFromElement(e)!=o&&(a="not same"):a="not same";const i=s.toStack.getAttribute("data-stack-type");let d="";i=="ace"?d=`Shared stack #${parseInt(s.toStack.getAttribute("data-ace-stack"))+1}`:d=`Personal stack #${parseInt(s.toStack.getAttribute("data-drop-stack"))+1}`,r=`${o} -> ${d} (${s.type})`}else a=e===null?"ok":"not same",r="flip main stack";return{status:a,message:r}}onPlayerBeforeDrop(t,e){this.playerId==t.playerId&&this.debugNextMove(t,e.dragElement)}onPlayerFlipMainStack(t){this.playerId==t.playerId&&this.debugNextMove(t,null)}addPlayer(t){const e=new R(t);return e.onFinish(s=>this.onPlayerFinish(s)),e.onBeforeDrop((s,a)=>this.onPlayerBeforeDrop(s,a)),e.onFlipMainStack((s,a)=>this.onPlayerFlipMainStack(s,a)),this.players[t]=e,e.initCards(),m.startPlayerTimer(this,e),e}hasPlayerWon(){for(const t of this.players)if(t.hasFinished)return t;return null}saveTimerCounts(t){const e=this.players[t];if(e){let s=!1;if(e.mSecsSinceCardEvent()>=6e4)return!1;for(const a of Object.values(e.timerCounts))a.count||(s=!0);s||(console.log("save timer counts, average mSecs",e.mSecsSinceCardEvent(),k.timerCountsToStr(e.timerCounts)),localStorage.setItem("lastTimerCounts",JSON.stringify(e.timerCounts)))}return!0}onPlayerFinish(t){const e=this.hasPlayerWon()?"finished":"won";p.robotTest===null&&this.saveTimerCounts(this.playerId);const s=new Date().getTime()-this.gameStartTime,a=D.mSecsToTimeStr(s);this.gameFinished=!0,this.updatePlayerRanks(),(p.robotTest!==null||window.confirm(`Player #${t.playerId+1} has ${e}
Time taken: ${a}
Continue playing?`))&&(this.gameFinished=!1)}getLastTimerCounts(){const t=localStorage.getItem("lastTimerCounts");return t?k.parseObjects(JSON.parse(t)):null}static getCardCodeFromElement(t){return cards.getCardCodeFromElement(t)}createAceStackDroppable(t){const e=new c($(t),{drop:(s,a)=>{e.lastCardDrop=new Date().getTime(),setTimeout(()=>{c.applyStyles($(t)),this.updateStackCounts(),this.updatePlayerRanks();const r=a.getAttribute("data-player");this.players[r].fireOnAfterDrop(t,a)},0)},isDropAccept:(s,a)=>{const r=e.getTopNonBlankCard(),o=u.getCardCodeFromElement(a);if(!a.parentNode.classList.contains("drop-stack")){if(!a.parentNode.classList.contains("take-stack"))return!1}const i=l.cardCodeToCard(this.playerId,o);let d=!1;if(!r)i.num==f.AceNumber&&(this.addAceStack(),d=!0);else{const C=u.getCardCodeFromElement(r),v=r.parentNode.getAttribute("data-player"),b=l.cardCodeToCard(v,C);b.num+1==i.num&&b.type==i.type&&(d=!0),d===!0&&b.num==f.KingNumber&&t.classList.add("stack-full")}if(d===!0){const C=a.parentNode.getAttribute("data-player");this.players[C].removeCardEvents(a)}return d}});return e.onBeforeDrop(s=>{const a=s.dragElement.getAttribute("data-player");this.players[a].fireOnBeforeDrop(t,s.dragElement)}),e}updateStackCounts(){const t=this.getStackCounts();for(const e in t){const s=this.players[e],a=t[e];s.updateAceStackCount(a.aceStackCount),s.updateDropStackCount(a.dropStackCount),s.updateAceStackKingCount(a.topKings)}}getStackCounts(){const t={};for(const e of this.players){let s=0;for(const a of e.dropStacks)s+=a.children.length-1;t[e.playerId]={aceStackCount:0,topKings:0,dropStackCount:s,playerId:e.playerId}}for(const e of this.aceStackElems){const s=E.getCardListFromStackElem(e),a=c.getTopNonBlankCard(e);for(const r of s){let o=t[r.playerId];++o.aceStackCount}if(a){const r=l.cardElemToCard(a);if(r&&r.num==f.KingNumber){let o=t[r.player];++o.topKings}}}return t}updatePlayerRanks(){const t=this.getStackCounts(),e=Object.values(t);e.sort((s,a)=>{const r=s.aceStackCount+s.dropStackCount;let i=a.aceStackCount+a.dropStackCount-r;if(i===0&&(i=a.topKings-s.topKings),i===0){const d=s.finishTime-s.startTime;i=a.finishTime-a.startTime-d}return i});for(let s=0;s<e.length;++s){const a=e[s],r=this.players[a.playerId];let o="";r.hasFinished&&(o=`Took ${D.mSecsToTimeStr(r.finishTime-r.startTime)}`),$(".player-rank",r.div).html(`Rank #${s+1} ${o}`)}}addAceStack(){const t=this.div.querySelector(".ace-stacks"),s=this.aceStackElems[0].cloneNode(),a=this.aceStacksDroppable.length;s.setAttribute("data-ace-stack",a),s.classList.add(`ace-stack-${a}`),t.appendChild(s),this.aceStacksDroppable.push(this.createAceStackDroppable(s)),this.aceStackElems.push(s)}initTimerCounts(){if(this.timerCounts=this.getLastTimerCounts(),this.timerCounts){const t=k.totalMSecsPerMove(this.timerCounts);t&&(this.robotTimerMSecs=t),console.log("lastMSecsPerMove",t,k.timerCountsToStr(this.timerCounts),this.timerCounts)}}initGui(t){this.div=t,this.aceStackElems=[document.querySelector(".ace-stack")],this.aceStacksDroppable=[];for(let e=0;e<this.players.length;++e)this.players[e].createGui(t);$(".add-player").on("click",()=>{this.addPlayer(this.players.length).createGui(t),this.updateStackCounts(),this.updatePlayerRanks()}),this.aceStacksDroppable.push(this.createAceStackDroppable(this.aceStackElems[0])),this.initTimerCounts(),this.updateStackCounts(),this.updatePlayerRanks()}}class x{constructor(t){this.div=t}initGui(){this.div.querySelector(".start-game").addEventListener("click",()=>this.startGame())}startGame(){const t=parseInt(this.div.querySelector("#players-count").value);if(t<=0)return!1;const e=new u(t),s=document.querySelector("#play-area");return this.div.classList.add("hide-area"),s.classList.remove("hide-area"),e.initGui(s),window.racingDemon=e,!0}}$(()=>{new x(document.querySelector("#lobby-area")).initGui()});
